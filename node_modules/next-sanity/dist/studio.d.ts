/// <reference types="react" />

import {ComponentProps} from 'react'
import {Config} from 'sanity'
import {DefaultTheme} from 'styled-components'
import {DocumentContext} from 'next/document'
import {GlobalStyleComponent} from 'styled-components'
import {MemoExoticComponent} from 'react'
import {SingleWorkspace} from 'sanity'
import {StudioProps} from 'sanity'
import {StudioTheme} from 'sanity'
import {WorkspaceOptions} from 'sanity'

/** @alpha */
export declare type ConfigWithBasePath = SingleWorkspaceWithBasePath | WorkspaceOptions[]

/** @alpha */
export declare type ConfigWithTheme = SingleWorkspaceWithTheme | WorkspaceOptionsWithTheme[]

/** @internal */
declare const Document_2: any

/** @internal */
declare const Head: any

/** @alpha */
export declare function isWorkspaces(config: Config): config is WorkspaceOptions[]

/** @alpha */
export declare function isWorkspaceWithTheme(
  workspace: SingleWorkspace | WorkspaceOptions
): workspace is SingleWorkspaceWithTheme | WorkspaceOptionsWithTheme

/** @alpha */
export declare type MetaThemeColors = {
  themeColorLight: string
  themeColorDark: string
}

/**
 * Override how the Studio renders by passing children.
 * This is useful for advanced use cases where you're using StudioProvider and StudioLayout instead of Studio:
 * ```
 * import {StudioProvider, StudioLayout} from 'sanity'
 * import {NextStudio} from 'next-sanity/studio'
 * <NextStudio config={config}>
 *   <StudioProvider config={config}>
 *     <CustomComponentThatUsesContextFromStudioProvider />
 *     <StudioLayout />
 *   </StudioProvider>
 * </NextStudio>
 * ```
 * @beta
 */
export declare const NextStudio: MemoExoticComponent<
  ({
    children,
    config,
    unstable__noGlobalStyle,
    unstable__noTailwindSvgFix,
    unstable__head,
    unstable__document_title,
    unstable__bg,
    unstable__fontFamily,
    unstable__noFavicons,
    unstable__noNoScript,
    ...props
  }: NextStudioProps) => JSX.Element
>

/** @alpha */
export declare const NextStudioGlobalStyle: GlobalStyleComponent<
  NextStudioGlobalStyleProps,
  DefaultTheme
>

/** @alpha */
export declare interface NextStudioGlobalStyleProps {
  fontFamily?: string
  bg?: string
  unstable__tailwindSvgFix?: boolean
}

/** @alpha */
export declare const NextStudioHead: MemoExoticComponent<
  ({
    children,
    themeColorDark,
    themeColorLight,
    title,
    favicons,
  }: NextStudioHeadProps) => JSX.Element
>

/** @alpha */
export declare interface NextStudioHeadProps extends Partial<MetaThemeColors> {
  children?: ComponentProps<typeof Head>['children']
  title?: string
  favicons?: boolean
}

/** @alpha */
export declare const NextStudioNoScript: () => JSX.Element

/** @beta */
export declare interface NextStudioProps extends StudioProps {
  children?: React.ReactNode
  /**
   * Turns off the default global styling
   * @alpha
   */
  unstable__noGlobalStyle?: boolean
  /**
   * Apply fix with SVG icon centering that happens if TailwindCSS is loaded, on by default
   * @alpha
   */
  unstable__noTailwindSvgFix?: NextStudioGlobalStyleProps['unstable__tailwindSvgFix']
  /**
   * Add stuff to the head with next/head
   * @alpha
   */
  unstable__head?: NextStudioHeadProps['children']
  /**
   * Sets the document title
   * @alpha
   */
  unstable__document_title?: NextStudioHeadProps['title']
  /**
   * Sets the background color of <html>
   * @alpha
   */
  unstable__bg?: NextStudioGlobalStyleProps['bg']
  /**
   * Sets the font-family of #__next
   * @alpha
   */
  unstable__fontFamily?: NextStudioGlobalStyleProps['fontFamily']
  /**
   * Don't load the favicon meta tags
   * @alpha
   */
  unstable__noFavicons?: boolean
  /**
   * Don't render the <noscript> tag
   * @alpha
   */
  unstable__noNoScript?: boolean
}

/**
 * Usage, from a pages/_document.tsx file:
 * ```
 * import {ServerStyleSheetDocument} from 'next-sanity/studio'
 *
 * export default class MyDocument extends ServerStyleSheetDocument {}
 * ```
 *
 * To do extra stuff in getInitialProps:
 * ```
 * import {ServerStyleSheetDocument} from 'next-sanity/studio'
 * import { type DocumentContext } from 'next/document'
 *
 * export default class MyDocument extends ServerStyleSheetDocument {
 *  static async getInitialProps(ctx: DocumentContext) {
 *    // You can still override renderPage:
 *    const originalRenderPage = ctx.renderPage
 *    ctx.renderPage = () => originalRenderPage({
 *       enhanceApp: (App) => (props) => <App {...props} />
 *    })
 *
 *    const initialProps = await ServerStyleSheetDocument.getInitialProps(ctx)
 *    const extraStyles = await getStyles()
 *    return {
 *      ...initialProps,
 *      styles: [initialProps.styles, extraStyles],
 *    }
 *  }
 * }
 * ```
 * @beta
 */
export declare class ServerStyleSheetDocument extends Document_2 {
  static getInitialProps(ctx: DocumentContext): Promise<any>
}

/** @alpha */
export declare type SingleWorkspaceWithBasePath = Omit<SingleWorkspace, 'basePath'> & {
  basePath: string
}

/** @alpha */
export declare type SingleWorkspaceWithTheme = Omit<SingleWorkspace, 'theme'> & WithTheme

/** @alpha */
export declare const useBackgroundColorsFromTheme: (theme: StudioTheme) => MetaThemeColors

/**
 * Parses the next route to determine the what the base path for Sanity Studio should be
 * @alpha
 */
export declare function useBasePath(): string

/**
 * Apply the base path from next to the config, prefixing any defined base path
 * @alpha
 */
export declare function useConfigWithBasePath(config: Config): ConfigWithBasePath

/** @alpha */
export declare const useTextFontFamilyFromTheme: (theme: StudioTheme) => string

/** @alpha */
export declare function useTheme(config: Config): StudioTheme

/** @alpha */
export declare type WithTheme = {
  theme: StudioTheme
}

/** @alpha */
export declare type WorkspaceOptionsWithTheme = Omit<WorkspaceOptions, 'theme'> & WithTheme

/** @alpha */
export declare interface WorkspaceWithBasePath extends Omit<WorkspaceOptions, 'basePath'> {
  basePath: string
}

export {}
